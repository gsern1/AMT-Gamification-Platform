/**
 * Gamification
 * An API to implement gamification features in the swagger-2.0 specification. ToDo (- /rules)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: guillaume.serneels@heig-vd.ch
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package ch.heigvd.gamification.api;

import ch.heigvd.gamification.ApiCallback;
import ch.heigvd.gamification.ApiClient;
import ch.heigvd.gamification.ApiException;
import ch.heigvd.gamification.ApiResponse;
import ch.heigvd.gamification.Configuration;
import ch.heigvd.gamification.Pair;
import ch.heigvd.gamification.ProgressRequestBody;
import ch.heigvd.gamification.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import ch.heigvd.gamification.api.dto.Application;
import ch.heigvd.gamification.api.dto.ErrorModel;
import ch.heigvd.gamification.api.dto.Badge;
import ch.heigvd.gamification.api.dto.Event;
import ch.heigvd.gamification.api.dto.PointScale;
import ch.heigvd.gamification.api.dto.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for addApplication */
    private com.squareup.okhttp.Call addApplicationCall(Application application, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = application;
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling addApplication(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/application".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Post new application on the platform
     * Creates a new application 
     * @param application application object to add to the platform (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addApplication(Application application) throws ApiException {
        addApplicationWithHttpInfo(application);
    }

    /**
     * Post new application on the platform
     * Creates a new application 
     * @param application application object to add to the platform (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addApplicationWithHttpInfo(Application application) throws ApiException {
        com.squareup.okhttp.Call call = addApplicationCall(application, null, null);
        return apiClient.execute(call);
    }

    /**
     * Post new application on the platform (asynchronously)
     * Creates a new application 
     * @param application application object to add to the platform (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addApplicationAsync(Application application, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addApplicationCall(application, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for addBadge */
    private com.squareup.okhttp.Call addBadgeCall(Badge badge, String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = badge;
        
        // verify the required parameter 'badge' is set
        if (badge == null) {
            throw new ApiException("Missing the required parameter 'badge' when calling addBadge(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addBadge(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/badges".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null)
        localVarHeaderParams.put("token", apiClient.parameterToString(token));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Creates a new badge
     * Creates a new badge 
     * @param badge Badge object to add to the store (required)
     * @param token token to be passed as a header (required)
     * @return Badge
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Badge addBadge(Badge badge, String token) throws ApiException {
        ApiResponse<Badge> resp = addBadgeWithHttpInfo(badge, token);
        return resp.getData();
    }

    /**
     * Creates a new badge
     * Creates a new badge 
     * @param badge Badge object to add to the store (required)
     * @param token token to be passed as a header (required)
     * @return ApiResponse&lt;Badge&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Badge> addBadgeWithHttpInfo(Badge badge, String token) throws ApiException {
        com.squareup.okhttp.Call call = addBadgeCall(badge, token, null, null);
        Type localVarReturnType = new TypeToken<Badge>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new badge (asynchronously)
     * Creates a new badge 
     * @param badge Badge object to add to the store (required)
     * @param token token to be passed as a header (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addBadgeAsync(Badge badge, String token, final ApiCallback<Badge> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addBadgeCall(badge, token, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Badge>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addEvent */
    private com.squareup.okhttp.Call addEventCall(Event event, String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = event;
        
        // verify the required parameter 'event' is set
        if (event == null) {
            throw new ApiException("Missing the required parameter 'event' when calling addEvent(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addEvent(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/events".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null)
        localVarHeaderParams.put("token", apiClient.parameterToString(token));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Post events on the platform
     * Creates a new event 
     * @param event event object to add to the platform (required)
     * @param token token to be passed as a header (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addEvent(Event event, String token) throws ApiException {
        addEventWithHttpInfo(event, token);
    }

    /**
     * Post events on the platform
     * Creates a new event 
     * @param event event object to add to the platform (required)
     * @param token token to be passed as a header (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addEventWithHttpInfo(Event event, String token) throws ApiException {
        com.squareup.okhttp.Call call = addEventCall(event, token, null, null);
        return apiClient.execute(call);
    }

    /**
     * Post events on the platform (asynchronously)
     * Creates a new event 
     * @param event event object to add to the platform (required)
     * @param token token to be passed as a header (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addEventAsync(Event event, String token, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addEventCall(event, token, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for addPointScale */
    private com.squareup.okhttp.Call addPointScaleCall(PointScale pointScale, String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = pointScale;
        
        // verify the required parameter 'pointScale' is set
        if (pointScale == null) {
            throw new ApiException("Missing the required parameter 'pointScale' when calling addPointScale(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addPointScale(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/pointScales".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null)
        localVarHeaderParams.put("token", apiClient.parameterToString(token));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Creates a new pointScale
     * Creates a new pointScale 
     * @param pointScale pointScale object to add to the store (required)
     * @param token token to be passed as a header (required)
     * @return PointScale
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PointScale addPointScale(PointScale pointScale, String token) throws ApiException {
        ApiResponse<PointScale> resp = addPointScaleWithHttpInfo(pointScale, token);
        return resp.getData();
    }

    /**
     * Creates a new pointScale
     * Creates a new pointScale 
     * @param pointScale pointScale object to add to the store (required)
     * @param token token to be passed as a header (required)
     * @return ApiResponse&lt;PointScale&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PointScale> addPointScaleWithHttpInfo(PointScale pointScale, String token) throws ApiException {
        com.squareup.okhttp.Call call = addPointScaleCall(pointScale, token, null, null);
        Type localVarReturnType = new TypeToken<PointScale>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new pointScale (asynchronously)
     * Creates a new pointScale 
     * @param pointScale pointScale object to add to the store (required)
     * @param token token to be passed as a header (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addPointScaleAsync(PointScale pointScale, String token, final ApiCallback<PointScale> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addPointScaleCall(pointScale, token, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PointScale>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteApplication */
    private com.squareup.okhttp.Call deleteApplicationCall(String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deleteApplication(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/application".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null)
        localVarHeaderParams.put("token", apiClient.parameterToString(token));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete an existing application
     * Delete an existing application 
     * @param token token to be passed as a header (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteApplication(String token) throws ApiException {
        deleteApplicationWithHttpInfo(token);
    }

    /**
     * Delete an existing application
     * Delete an existing application 
     * @param token token to be passed as a header (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteApplicationWithHttpInfo(String token) throws ApiException {
        com.squareup.okhttp.Call call = deleteApplicationCall(token, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an existing application (asynchronously)
     * Delete an existing application 
     * @param token token to be passed as a header (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteApplicationAsync(String token, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteApplicationCall(token, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteBadge */
    private com.squareup.okhttp.Call deleteBadgeCall(Long badgeId, String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'badgeId' is set
        if (badgeId == null) {
            throw new ApiException("Missing the required parameter 'badgeId' when calling deleteBadge(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deleteBadge(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/badges/{badgeId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "badgeId" + "\\}", apiClient.escapeString(badgeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null)
        localVarHeaderParams.put("token", apiClient.parameterToString(token));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete an existing badge
     * Delete an existing badge 
     * @param badgeId Id of the badge that needs to be deleted (required)
     * @param token token to be passed as a header (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteBadge(Long badgeId, String token) throws ApiException {
        deleteBadgeWithHttpInfo(badgeId, token);
    }

    /**
     * Delete an existing badge
     * Delete an existing badge 
     * @param badgeId Id of the badge that needs to be deleted (required)
     * @param token token to be passed as a header (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteBadgeWithHttpInfo(Long badgeId, String token) throws ApiException {
        com.squareup.okhttp.Call call = deleteBadgeCall(badgeId, token, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an existing badge (asynchronously)
     * Delete an existing badge 
     * @param badgeId Id of the badge that needs to be deleted (required)
     * @param token token to be passed as a header (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBadgeAsync(Long badgeId, String token, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBadgeCall(badgeId, token, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deletePointScale */
    private com.squareup.okhttp.Call deletePointScaleCall(Long pointScaleId, String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'pointScaleId' is set
        if (pointScaleId == null) {
            throw new ApiException("Missing the required parameter 'pointScaleId' when calling deletePointScale(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deletePointScale(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/pointScales/{pointScaleId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "pointScaleId" + "\\}", apiClient.escapeString(pointScaleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null)
        localVarHeaderParams.put("token", apiClient.parameterToString(token));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete an existing pointScale
     * Delete an existing pointScale 
     * @param pointScaleId Id of the pointScale that needs to be deleted (required)
     * @param token token to be passed as a header (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePointScale(Long pointScaleId, String token) throws ApiException {
        deletePointScaleWithHttpInfo(pointScaleId, token);
    }

    /**
     * Delete an existing pointScale
     * Delete an existing pointScale 
     * @param pointScaleId Id of the pointScale that needs to be deleted (required)
     * @param token token to be passed as a header (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePointScaleWithHttpInfo(Long pointScaleId, String token) throws ApiException {
        com.squareup.okhttp.Call call = deletePointScaleCall(pointScaleId, token, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an existing pointScale (asynchronously)
     * Delete an existing pointScale 
     * @param pointScaleId Id of the pointScale that needs to be deleted (required)
     * @param token token to be passed as a header (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePointScaleAsync(Long pointScaleId, String token, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePointScaleCall(pointScaleId, token, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for findBadge */
    private com.squareup.okhttp.Call findBadgeCall(Long badgeId, String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'badgeId' is set
        if (badgeId == null) {
            throw new ApiException("Missing the required parameter 'badgeId' when calling findBadge(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling findBadge(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/badges/{badgeId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "badgeId" + "\\}", apiClient.escapeString(badgeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null)
        localVarHeaderParams.put("token", apiClient.parameterToString(token));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Returns a single badge
     * Returns a single badge 
     * @param badgeId ID of badge to fetch (required)
     * @param token token to be passed as a header (required)
     * @return Badge
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Badge findBadge(Long badgeId, String token) throws ApiException {
        ApiResponse<Badge> resp = findBadgeWithHttpInfo(badgeId, token);
        return resp.getData();
    }

    /**
     * Returns a single badge
     * Returns a single badge 
     * @param badgeId ID of badge to fetch (required)
     * @param token token to be passed as a header (required)
     * @return ApiResponse&lt;Badge&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Badge> findBadgeWithHttpInfo(Long badgeId, String token) throws ApiException {
        com.squareup.okhttp.Call call = findBadgeCall(badgeId, token, null, null);
        Type localVarReturnType = new TypeToken<Badge>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a single badge (asynchronously)
     * Returns a single badge 
     * @param badgeId ID of badge to fetch (required)
     * @param token token to be passed as a header (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findBadgeAsync(Long badgeId, String token, final ApiCallback<Badge> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findBadgeCall(badgeId, token, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Badge>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findBadges */
    private com.squareup.okhttp.Call findBadgesCall(String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling findBadges(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/badges".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null)
        localVarHeaderParams.put("token", apiClient.parameterToString(token));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Returns every badges
     * Returns every badges 
     * @param token token to be passed as a header (required)
     * @return List&lt;Badge&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Badge> findBadges(String token) throws ApiException {
        ApiResponse<List<Badge>> resp = findBadgesWithHttpInfo(token);
        return resp.getData();
    }

    /**
     * Returns every badges
     * Returns every badges 
     * @param token token to be passed as a header (required)
     * @return ApiResponse&lt;List&lt;Badge&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Badge>> findBadgesWithHttpInfo(String token) throws ApiException {
        com.squareup.okhttp.Call call = findBadgesCall(token, null, null);
        Type localVarReturnType = new TypeToken<List<Badge>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns every badges (asynchronously)
     * Returns every badges 
     * @param token token to be passed as a header (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findBadgesAsync(String token, final ApiCallback<List<Badge>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findBadgesCall(token, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Badge>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findPointScale */
    private com.squareup.okhttp.Call findPointScaleCall(Long pointScaleId, String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'pointScaleId' is set
        if (pointScaleId == null) {
            throw new ApiException("Missing the required parameter 'pointScaleId' when calling findPointScale(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling findPointScale(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/pointScales/{pointScaleId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "pointScaleId" + "\\}", apiClient.escapeString(pointScaleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null)
        localVarHeaderParams.put("token", apiClient.parameterToString(token));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Returns a single pointScale
     * Returns a single pointScale 
     * @param pointScaleId ID of pointScale to fetch (required)
     * @param token token to be passed as a header (required)
     * @return PointScale
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PointScale findPointScale(Long pointScaleId, String token) throws ApiException {
        ApiResponse<PointScale> resp = findPointScaleWithHttpInfo(pointScaleId, token);
        return resp.getData();
    }

    /**
     * Returns a single pointScale
     * Returns a single pointScale 
     * @param pointScaleId ID of pointScale to fetch (required)
     * @param token token to be passed as a header (required)
     * @return ApiResponse&lt;PointScale&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PointScale> findPointScaleWithHttpInfo(Long pointScaleId, String token) throws ApiException {
        com.squareup.okhttp.Call call = findPointScaleCall(pointScaleId, token, null, null);
        Type localVarReturnType = new TypeToken<PointScale>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a single pointScale (asynchronously)
     * Returns a single pointScale 
     * @param pointScaleId ID of pointScale to fetch (required)
     * @param token token to be passed as a header (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findPointScaleAsync(Long pointScaleId, String token, final ApiCallback<PointScale> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findPointScaleCall(pointScaleId, token, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PointScale>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findPointScales */
    private com.squareup.okhttp.Call findPointScalesCall(String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling findPointScales(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/pointScales".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null)
        localVarHeaderParams.put("token", apiClient.parameterToString(token));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Returns every pointScales
     * Returns every pointScales 
     * @param token token to be passed as a header (required)
     * @return List&lt;PointScale&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PointScale> findPointScales(String token) throws ApiException {
        ApiResponse<List<PointScale>> resp = findPointScalesWithHttpInfo(token);
        return resp.getData();
    }

    /**
     * Returns every pointScales
     * Returns every pointScales 
     * @param token token to be passed as a header (required)
     * @return ApiResponse&lt;List&lt;PointScale&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PointScale>> findPointScalesWithHttpInfo(String token) throws ApiException {
        com.squareup.okhttp.Call call = findPointScalesCall(token, null, null);
        Type localVarReturnType = new TypeToken<List<PointScale>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns every pointScales (asynchronously)
     * Returns every pointScales 
     * @param token token to be passed as a header (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findPointScalesAsync(String token, final ApiCallback<List<PointScale>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findPointScalesCall(token, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PointScale>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findUserBadges */
    private com.squareup.okhttp.Call findUserBadgesCall(Long userId, String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling findUserBadges(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling findUserBadges(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/user/{userId}/badges".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null)
        localVarHeaderParams.put("token", apiClient.parameterToString(token));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Returns a user&#39;s badges
     * Returns a user&#39;s badges 
     * @param userId ID of user (required)
     * @param token token to be passed as a header (required)
     * @return List&lt;Badge&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Badge> findUserBadges(Long userId, String token) throws ApiException {
        ApiResponse<List<Badge>> resp = findUserBadgesWithHttpInfo(userId, token);
        return resp.getData();
    }

    /**
     * Returns a user&#39;s badges
     * Returns a user&#39;s badges 
     * @param userId ID of user (required)
     * @param token token to be passed as a header (required)
     * @return ApiResponse&lt;List&lt;Badge&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Badge>> findUserBadgesWithHttpInfo(Long userId, String token) throws ApiException {
        com.squareup.okhttp.Call call = findUserBadgesCall(userId, token, null, null);
        Type localVarReturnType = new TypeToken<List<Badge>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a user&#39;s badges (asynchronously)
     * Returns a user&#39;s badges 
     * @param userId ID of user (required)
     * @param token token to be passed as a header (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findUserBadgesAsync(Long userId, String token, final ApiCallback<List<Badge>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findUserBadgesCall(userId, token, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Badge>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findUserPointScales */
    private com.squareup.okhttp.Call findUserPointScalesCall(Long userId, String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling findUserPointScales(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling findUserPointScales(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/user/{userId}/pointScales".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null)
        localVarHeaderParams.put("token", apiClient.parameterToString(token));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Returns a user&#39;s pointScales
     * Returns a user&#39;s pointScales 
     * @param userId ID of user (required)
     * @param token token to be passed as a header (required)
     * @return List&lt;PointScale&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PointScale> findUserPointScales(Long userId, String token) throws ApiException {
        ApiResponse<List<PointScale>> resp = findUserPointScalesWithHttpInfo(userId, token);
        return resp.getData();
    }

    /**
     * Returns a user&#39;s pointScales
     * Returns a user&#39;s pointScales 
     * @param userId ID of user (required)
     * @param token token to be passed as a header (required)
     * @return ApiResponse&lt;List&lt;PointScale&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PointScale>> findUserPointScalesWithHttpInfo(Long userId, String token) throws ApiException {
        com.squareup.okhttp.Call call = findUserPointScalesCall(userId, token, null, null);
        Type localVarReturnType = new TypeToken<List<PointScale>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a user&#39;s pointScales (asynchronously)
     * Returns a user&#39;s pointScales 
     * @param userId ID of user (required)
     * @param token token to be passed as a header (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findUserPointScalesAsync(Long userId, String token, final ApiCallback<List<PointScale>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findUserPointScalesCall(userId, token, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PointScale>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findUsers */
    private com.squareup.okhttp.Call findUsersCall(String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling findUsers(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/users".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null)
        localVarHeaderParams.put("token", apiClient.parameterToString(token));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Returns every users
     * Returns every users 
     * @param token token to be passed as a header (required)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<User> findUsers(String token) throws ApiException {
        ApiResponse<List<User>> resp = findUsersWithHttpInfo(token);
        return resp.getData();
    }

    /**
     * Returns every users
     * Returns every users 
     * @param token token to be passed as a header (required)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<User>> findUsersWithHttpInfo(String token) throws ApiException {
        com.squareup.okhttp.Call call = findUsersCall(token, null, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns every users (asynchronously)
     * Returns every users 
     * @param token token to be passed as a header (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findUsersAsync(String token, final ApiCallback<List<User>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findUsersCall(token, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for leaderboard */
    private com.squareup.okhttp.Call leaderboardCall(String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling leaderboard(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/leaderboard".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null)
        localVarHeaderParams.put("token", apiClient.parameterToString(token));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Returns the leaderboard
     * Returns the leaderboard 
     * @param token token to be passed as a header (required)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<User> leaderboard(String token) throws ApiException {
        ApiResponse<List<User>> resp = leaderboardWithHttpInfo(token);
        return resp.getData();
    }

    /**
     * Returns the leaderboard
     * Returns the leaderboard 
     * @param token token to be passed as a header (required)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<User>> leaderboardWithHttpInfo(String token) throws ApiException {
        com.squareup.okhttp.Call call = leaderboardCall(token, null, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns the leaderboard (asynchronously)
     * Returns the leaderboard 
     * @param token token to be passed as a header (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call leaderboardAsync(String token, final ApiCallback<List<User>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = leaderboardCall(token, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for loginApplication */
    private com.squareup.okhttp.Call loginApplicationCall(Application application, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = application;
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling loginApplication(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/application".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Returns a the application token
     * Returns the application token 
     * @param application application object to add to the store (required)
     * @return PointScale
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PointScale loginApplication(Application application) throws ApiException {
        ApiResponse<PointScale> resp = loginApplicationWithHttpInfo(application);
        return resp.getData();
    }

    /**
     * Returns a the application token
     * Returns the application token 
     * @param application application object to add to the store (required)
     * @return ApiResponse&lt;PointScale&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PointScale> loginApplicationWithHttpInfo(Application application) throws ApiException {
        com.squareup.okhttp.Call call = loginApplicationCall(application, null, null);
        Type localVarReturnType = new TypeToken<PointScale>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a the application token (asynchronously)
     * Returns the application token 
     * @param application application object to add to the store (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call loginApplicationAsync(Application application, final ApiCallback<PointScale> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = loginApplicationCall(application, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PointScale>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateBadge */
    private com.squareup.okhttp.Call updateBadgeCall(Badge badge, Long badgeId, String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = badge;
        
        // verify the required parameter 'badge' is set
        if (badge == null) {
            throw new ApiException("Missing the required parameter 'badge' when calling updateBadge(Async)");
        }
        
        // verify the required parameter 'badgeId' is set
        if (badgeId == null) {
            throw new ApiException("Missing the required parameter 'badgeId' when calling updateBadge(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateBadge(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/badges/{badgeId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "badgeId" + "\\}", apiClient.escapeString(badgeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null)
        localVarHeaderParams.put("token", apiClient.parameterToString(token));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update an existing badge
     * Update an existing badge 
     * @param badge Badge object to add to the store (required)
     * @param badgeId Id of the badge that needs to be updated (required)
     * @param token token to be passed as a header (required)
     * @return Badge
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Badge updateBadge(Badge badge, Long badgeId, String token) throws ApiException {
        ApiResponse<Badge> resp = updateBadgeWithHttpInfo(badge, badgeId, token);
        return resp.getData();
    }

    /**
     * Update an existing badge
     * Update an existing badge 
     * @param badge Badge object to add to the store (required)
     * @param badgeId Id of the badge that needs to be updated (required)
     * @param token token to be passed as a header (required)
     * @return ApiResponse&lt;Badge&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Badge> updateBadgeWithHttpInfo(Badge badge, Long badgeId, String token) throws ApiException {
        com.squareup.okhttp.Call call = updateBadgeCall(badge, badgeId, token, null, null);
        Type localVarReturnType = new TypeToken<Badge>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an existing badge (asynchronously)
     * Update an existing badge 
     * @param badge Badge object to add to the store (required)
     * @param badgeId Id of the badge that needs to be updated (required)
     * @param token token to be passed as a header (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBadgeAsync(Badge badge, Long badgeId, String token, final ApiCallback<Badge> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBadgeCall(badge, badgeId, token, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Badge>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updatePointScale */
    private com.squareup.okhttp.Call updatePointScaleCall(PointScale pointScale, Long pointScaleId, String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = pointScale;
        
        // verify the required parameter 'pointScale' is set
        if (pointScale == null) {
            throw new ApiException("Missing the required parameter 'pointScale' when calling updatePointScale(Async)");
        }
        
        // verify the required parameter 'pointScaleId' is set
        if (pointScaleId == null) {
            throw new ApiException("Missing the required parameter 'pointScaleId' when calling updatePointScale(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updatePointScale(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/pointScales/{pointScaleId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "pointScaleId" + "\\}", apiClient.escapeString(pointScaleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (token != null)
        localVarHeaderParams.put("token", apiClient.parameterToString(token));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update an existing pointScale
     * Update an existing pointScale 
     * @param pointScale pointScale object to add to the store (required)
     * @param pointScaleId Id of the pointScale that needs to be updated (required)
     * @param token token to be passed as a header (required)
     * @return PointScale
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PointScale updatePointScale(PointScale pointScale, Long pointScaleId, String token) throws ApiException {
        ApiResponse<PointScale> resp = updatePointScaleWithHttpInfo(pointScale, pointScaleId, token);
        return resp.getData();
    }

    /**
     * Update an existing pointScale
     * Update an existing pointScale 
     * @param pointScale pointScale object to add to the store (required)
     * @param pointScaleId Id of the pointScale that needs to be updated (required)
     * @param token token to be passed as a header (required)
     * @return ApiResponse&lt;PointScale&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PointScale> updatePointScaleWithHttpInfo(PointScale pointScale, Long pointScaleId, String token) throws ApiException {
        com.squareup.okhttp.Call call = updatePointScaleCall(pointScale, pointScaleId, token, null, null);
        Type localVarReturnType = new TypeToken<PointScale>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an existing pointScale (asynchronously)
     * Update an existing pointScale 
     * @param pointScale pointScale object to add to the store (required)
     * @param pointScaleId Id of the pointScale that needs to be updated (required)
     * @param token token to be passed as a header (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePointScaleAsync(PointScale pointScale, Long pointScaleId, String token, final ApiCallback<PointScale> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePointScaleCall(pointScale, pointScaleId, token, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PointScale>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
