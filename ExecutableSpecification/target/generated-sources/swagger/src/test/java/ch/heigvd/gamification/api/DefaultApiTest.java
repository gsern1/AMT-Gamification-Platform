/**
 * Gamification
 * An API to implement gamification features in the swagger-2.0 specification. ToDo (- /rules)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: guillaume.serneels@heig-vd.ch
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package ch.heigvd.gamification.api;

import ch.heigvd.gamification.ApiException;
import ch.heigvd.gamification.api.dto.Application;
import ch.heigvd.gamification.api.dto.ErrorModel;
import ch.heigvd.gamification.api.dto.Badge;
import ch.heigvd.gamification.api.dto.Event;
import ch.heigvd.gamification.api.dto.PointScale;
import ch.heigvd.gamification.api.dto.User;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Post new application on the platform
     *
     * Creates a new application 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addApplicationTest() throws ApiException {
        Application application = null;
        // api.addApplication(application);

        // TODO: test validations
    }
    
    /**
     * Creates a new badge
     *
     * Creates a new badge 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addBadgeTest() throws ApiException {
        Badge badge = null;
        String token = null;
        // Badge response = api.addBadge(badge, token);

        // TODO: test validations
    }
    
    /**
     * Post events on the platform
     *
     * Creates a new event 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addEventTest() throws ApiException {
        Event event = null;
        String token = null;
        // api.addEvent(event, token);

        // TODO: test validations
    }
    
    /**
     * Creates a new pointScale
     *
     * Creates a new pointScale 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPointScaleTest() throws ApiException {
        PointScale pointScale = null;
        String token = null;
        // PointScale response = api.addPointScale(pointScale, token);

        // TODO: test validations
    }
    
    /**
     * Delete an existing application
     *
     * Delete an existing application 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteApplicationTest() throws ApiException {
        String token = null;
        // api.deleteApplication(token);

        // TODO: test validations
    }
    
    /**
     * Delete an existing badge
     *
     * Delete an existing badge 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBadgeTest() throws ApiException {
        Long badgeId = null;
        String token = null;
        // api.deleteBadge(badgeId, token);

        // TODO: test validations
    }
    
    /**
     * Delete an existing pointScale
     *
     * Delete an existing pointScale 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePointScaleTest() throws ApiException {
        Long pointScaleId = null;
        String token = null;
        // api.deletePointScale(pointScaleId, token);

        // TODO: test validations
    }
    
    /**
     * Returns a single badge
     *
     * Returns a single badge 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findBadgeTest() throws ApiException {
        Long badgeId = null;
        String token = null;
        // Badge response = api.findBadge(badgeId, token);

        // TODO: test validations
    }
    
    /**
     * Returns every badges
     *
     * Returns every badges 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findBadgesTest() throws ApiException {
        String token = null;
        // List<Badge> response = api.findBadges(token);

        // TODO: test validations
    }
    
    /**
     * Returns a single pointScale
     *
     * Returns a single pointScale 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findPointScaleTest() throws ApiException {
        Long pointScaleId = null;
        String token = null;
        // PointScale response = api.findPointScale(pointScaleId, token);

        // TODO: test validations
    }
    
    /**
     * Returns every pointScales
     *
     * Returns every pointScales 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findPointScalesTest() throws ApiException {
        String token = null;
        // List<PointScale> response = api.findPointScales(token);

        // TODO: test validations
    }
    
    /**
     * Returns a user&#39;s badges
     *
     * Returns a user&#39;s badges 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findUserBadgesTest() throws ApiException {
        Long userId = null;
        String token = null;
        // List<Badge> response = api.findUserBadges(userId, token);

        // TODO: test validations
    }
    
    /**
     * Returns a user&#39;s pointScales
     *
     * Returns a user&#39;s pointScales 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findUserPointScalesTest() throws ApiException {
        Long userId = null;
        String token = null;
        // List<PointScale> response = api.findUserPointScales(userId, token);

        // TODO: test validations
    }
    
    /**
     * Returns every users
     *
     * Returns every users 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findUsersTest() throws ApiException {
        String token = null;
        // List<User> response = api.findUsers(token);

        // TODO: test validations
    }
    
    /**
     * Returns the leaderboard
     *
     * Returns the leaderboard 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void leaderboardTest() throws ApiException {
        String token = null;
        // List<User> response = api.leaderboard(token);

        // TODO: test validations
    }
    
    /**
     * Returns a the application token
     *
     * Returns the application token 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void loginApplicationTest() throws ApiException {
        Application application = null;
        // PointScale response = api.loginApplication(application);

        // TODO: test validations
    }
    
    /**
     * Update an existing badge
     *
     * Update an existing badge 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBadgeTest() throws ApiException {
        Badge badge = null;
        Long badgeId = null;
        String token = null;
        // Badge response = api.updateBadge(badge, badgeId, token);

        // TODO: test validations
    }
    
    /**
     * Update an existing pointScale
     *
     * Update an existing pointScale 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePointScaleTest() throws ApiException {
        PointScale pointScale = null;
        Long pointScaleId = null;
        String token = null;
        // PointScale response = api.updatePointScale(pointScale, pointScaleId, token);

        // TODO: test validations
    }
    
}
