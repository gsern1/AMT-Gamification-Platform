swagger: '2.0'
info:
  version: '1.0.0'
  title: Gamification
  description: An API to implement gamification features in the swagger-2.0 specification.
  contact:
    name: Guillaume Serneels
    email: guillaume.serneels@heig-vd.ch
    url: www.heig-vd.ch
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
host: localhost:8090
basePath: /api
schemes:
  - http
paths:
  /badges:
    get:
      summary: Returns every badges
      description: |
        Returns every badges
      operationId: findBadges
      produces:
        - application/json
      parameters:
        - name: token
          in: header
          description: token to be passed as a header
          required: true
          type: string
      responses:
        '200':
          description: Badges returned
          schema:
            type: array
            items:
              $ref: '#/definitions/badgeWithLocation'
        '403':
          description: Invalid token
    post:
      summary: Creates a new badge
      description: |
        Creates a new badge
      operationId: addBadge
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: badge
          in: body
          description: Badge object to add to the store
          required: true
          schema:
            $ref: '#/definitions/badge'
        - name: token
          in: header
          description: token to be passed as a header
          required: true
          type: string
      responses:
        '201':
          description: Badge created
          headers:
            location:
                description: location of the newly created badge,
                type: string
        '403':
          description: Invalid token
        '422':
          description: Invalid payload

  /badges/{badgeId}:
    get:
      summary: Returns a single badge
      description: |
        Returns a single badge
      operationId: findBadge
      produces:
        - application/json
      parameters:
        - name: badgeId
          in: path
          description: ID of badge to fetch
          required: true
          type: integer
          format: int64
        - name: token
          in: header
          description: token to be passed as a header
          required: true
          type: string
      responses:
        '200':
          description: Badge found
          schema:
            $ref: '#/definitions/badge'
        '403':
          description: Invalid token
        '404':
          description: Badge not found
        '422':
          description: Invalid payload
    put:
      summary: Update an existing badge
      description: |
        Update an existing badge
      operationId: UpdateBadge
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: badge
          in: body
          description: Badge object to add to the store
          required: true
          schema:
            $ref: '#/definitions/badge'
        - name: badgeId
          in: path
          description: Id of the badge that needs to be updated
          required: true
          type: integer
          format: int64
        - name: token
          in: header
          description: token to be passed as a header
          required: true
          type: string
      responses:
        '200':
          description: Badge updated
        '403':
          description: Invalid token
        '404':
          description: Badge not found
        '422':
          description: Invalid payload
    delete:
      summary: Delete an existing badge
      description: |
        Delete an existing badge
      operationId: DeleteBadge
      produces:
        - application/json
      parameters:
        - name: badgeId
          in: path
          description: Id of the badge that needs to be deleted
          required: true
          type: integer
          format: int64
        - name: token
          in: header
          description: token to be passed as a header
          required: true
          type: string
      responses:
        '200':
          description: Badge deleted successfully
        '404':
          description: Badge not found
        '403':
          description: Invalid token
        '422':
          description: Invalid payload

  /pointScales:
    get:
      summary: Returns every pointScales
      description: |
        Returns every pointScales
      operationId: findPointScales
      produces:
        - application/json
      parameters:
        - name: token
          in: header
          description: token to be passed as a header
          required: true
          type: string
      responses:
        '200':
          description: pointScales list
          schema:
            type: array
            items:
              $ref: '#/definitions/pointScaleWithLocation'
        '403':
          description: Invalid token
    post:
      summary: Creates a new pointScale
      description: |
        Creates a new pointScale
      operationId: addPointScale
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: pointScale
          in: body
          description: pointScale object to add to the store
          required: true
          schema:
            $ref: '#/definitions/pointScale'
        - name: token
          in: header
          description: token to be passed as a header
          required: true
          type: string
      responses:
        '201':
          description: pointScale created
          headers:
            location:
              description: Location of the pointScale
              type: string
        '403':
          description: Invalid token
        '422':
          description: Invalid payload


  /pointScales/{pointScaleId}:
    get:
      summary: Returns a single pointScale
      description: |
        Returns a single pointScale
      operationId: findPointScale
      produces:
        - application/json
      parameters:
        - name: pointScaleId
          in: path
          description: ID of pointScale to fetch
          required: true
          type: integer
          format: int64
        - name: token
          in: header
          description: token to be passed as a header
          required: true
          type: string
      responses:
        '200':
          description: pointScale retrieved
          schema:
            $ref: '#/definitions/pointScale'
        '403':
          description: Invalid token
        '404':
          description: PointScale doesn't exist
    put:
      summary: Update an existing pointScale
      description: |
        Update an existing pointScale
      operationId: UpdatePointScale
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: pointScale
          in: body
          description: pointScale object to add to the store
          required: true
          schema:
            $ref: '#/definitions/pointScale'
        - name: pointScaleId
          in: path
          description: Id of the pointScale that needs to be updated
          required: true
          type: integer
          format: int64
        - name: token
          in: header
          description: token to be passed as a header
          required: true
          type: string
      responses:
        '200':
          description: pointScale updated
        '403':
          description: Invalid token
        '404':
          description: Not found
    delete:
      summary: Delete an existing pointScale
      description: |
        Delete an existing pointScale
      operationId: DeletePointScale
      produces:
        - application/json
      parameters:
        - name: pointScaleId
          in: path
          description: Id of the pointScale that needs to be deleted
          required: true
          type: integer
          format: int64
        - name: token
          in: header
          description: token to be passed as a header
          required: true
          type: string
      responses:
        '200':
          description: pointScale deleted successfully
        '403':
          description: Invalid token
        '404':
          description: pointScale not found
        '422':
          description: Invalid id supplied
  /events:
    post:
      summary: Post events on the platform
      description: |
        Creates a new event
      operationId: addEvent
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: event
          in: body
          description: event object to add to the platform
          required: true
          schema:
            $ref: '#/definitions/event'
        - name: token
          in: header
          description: token to be passed as a header
          required: true
          type: string
      responses:
        '201':
          description: event response
        '403':
          description: Invalid token
  /application:
    post:
      summary: Post new application on the platform
      description: |
        Creates a new application
      operationId: addApplication
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: application
          in: body
          description: application object to add to the platform
          required: true
          schema:
            $ref: '#/definitions/application'
      responses:
        '201':
          description: application response
          schema:
            $ref: '#/definitions/token'
        '400':
          description: Invalid payload
        '403':
          description: Invalid token
        '409':
          description: Conflict
    delete:
      summary: Delete an existing application
      description: |
        Delete an existing application
      operationId: DeleteApplication
      produces:
        - application/json
      parameters:
        - name: token
          in: header
          description: token to be passed as a header
          required: true
          type: string
      responses:
        '204':
          description: Application deleted successfully
        '403':
          description: Invalid token
  /auth:
    post:
      summary: Returns an application token
      description: |
        Returns the application token
      operationId: loginApplication
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: application
          in: body
          description: application object to get
          required: true
          schema:
            $ref: '#/definitions/credentials'
      responses:
        '200':
          description: Succesful authentication
          schema:
            $ref: '#/definitions/token'
        '400':
          description: Application not found
        '401':
          description: Invalid password

  /users:
    get:
      summary: Returns every users
      description: |
        Returns every users
      operationId: findUsers
      produces:
        - application/json
      parameters:
        - name: token
          in: header
          description: token to be passed as a header
          required: true
          type: string
      responses:
        '200':
          description: users response
          schema:
            type: array
            items:
              $ref: '#/definitions/user'
        '403':
          description: Invalid token
  /leaderboard:
    get:
      summary: Returns the leaderboard
      description: |
        Returns the leaderboard
      operationId: leaderboard
      produces:
        - application/json
      parameters:
        - name: token
          in: header
          description: token to be passed as a header
          required: true
          type: string
      responses:
        '200':
          description: leaderboard response
          schema:
            type: array
            items:
              $ref: '#/definitions/userWithNumberOfBadges'
        '403':
          description: Invalid token
  /users/{userName}/badges:
    get:
      summary: Returns a user's badges
      description: |
        Returns a user's badges
      operationId: findUserBadges
      produces:
        - application/json
      parameters:
        - name: userName
          in: path
          description: name of the user
          required: true
          type: string
        - name: token
          in: header
          description: token to be passed as a header
          required: true
          type: string
      responses:
        '200':
          description: badges response
          schema:
            type: array
            items:
              $ref: '#/definitions/badgeWithLocation'
        '403':
          description: Invalid token
  /users/{userName}/pointScales:
    get:
      summary: Returns a user's pointScales
      description: |
        Returns a user's pointScales
      operationId: findUserPointScales
      produces:
        - application/json
      parameters:
        - name: userName
          in: path
          description: name of the user
          required: true
          type: string
        - name: token
          in: header
          description: token to be passed as a header
          required: true
          type: string
      responses:
        '200':
          description: pointScales response
          schema:
            type: array
            items:
              $ref: '#/definitions/userPointScale'
        '403':
          description: Invalid token
  /badgeRules:
    get:
      summary: Returns every badge rules
      description: |
        Returns every badge rules
      operationId: findBadgeRules
      produces:
        - application/json
      parameters:
        - name: token
          in: header
          description: token to be passed as a header
          required: true
          type: string
      responses:
        '200':
          description: badgeRules response
          schema:
            type: array
            items:
              $ref: '#/definitions/badgeRuleWithLocation'
        '403':
          description: Invalid token
    post:
      summary: Creates a new badgeRule
      description: |
        Creates a new badgeRule
      operationId: addBadgeRule
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: badgeRule
          in: body
          description: badgeRule object to add to the store
          required: true
          schema:
            $ref: '#/definitions/badgeRule'
        - name: token
          in: header
          description: token to be passed as a header
          required: true
          type: string
      responses:
        '201':
          description: badgeRule response
          headers:
            location:
              description: Location of the badgeRule
              type: string
        '403':
          description: Invalid token

  /badgeRules/{badgeRuleId}:
    get:
      summary: Returns a single badgeRule
      description: |
        Returns a single badgeRule
      operationId: findBadgeRule
      produces:
        - application/json
      parameters:
        - name: badgeRuleId
          in: path
          description: ID of badgeRule to fetch
          required: true
          type: integer
          format: int64
        - name: token
          in: header
          description: token to be passed as a header
          required: true
          type: string
      responses:
        '200':
          description: badgeRule response
          schema:
            $ref: '#/definitions/badgeRule'
        '403':
          description: Invalid token
    put:
      summary: Update an existing badgeRule
      description: |
        Update an existing badgeRule
      operationId: UpdateBadgeRule
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: badgeRule
          in: body
          description: badgeRule object to add to the store
          required: true
          schema:
            $ref: '#/definitions/badgeRule'
        - name: badgeRuleId
          in: path
          description: Id of the badgeRule that needs to be updated
          required: true
          type: integer
          format: int64
        - name: token
          in: header
          description: token to be passed as a header
          required: true
          type: string
      responses:
        '200':
          description: badgeRule response
        '403':
          description: Invalid token'
    delete:
      summary: Delete an existing badgeRule
      description: |
        Delete an existing badgeRule
      operationId: DeleteBadgeRule
      produces:
        - application/json
      parameters:
        - name: badgeRuleId
          in: path
          description: Id of the badgeRule that needs to be deleted
          required: true
          type: integer
          format: int64
        - name: token
          in: header
          description: token to be passed as a header
          required: true
          type: string
      responses:
        '204':
          description: badgeRule deleted successfully
        '404':
          description: badgeRule not found
        '400':
          description: Invalid Id supplied

  /pointScaleRules:
    get:
      summary: Returns every pointScale rules
      description: |
        Returns every pointScale rules
      operationId: findPointScaleRules
      produces:
        - application/json
      parameters:
        - name: token
          in: header
          description: token to be passed as a header
          required: true
          type: string
      responses:
        '200':
          description: pointScaleRules response
          schema:
            type: array
            items:
              $ref: '#/definitions/pointScaleRuleWithLocation'
        '403':
          description: Invalid token
    post:
      summary: Creates a new pointScaleRule
      description: |
        Creates a new pointScaleRule
      operationId: addPointScaleRule
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: pointScaleRule
          in: body
          description: pointScaleRule object to add to the store
          required: true
          schema:
            $ref: '#/definitions/pointScaleRule'
        - name: token
          in: header
          description: token to be passed as a header
          required: true
          type: string
      responses:
        '201':
          description: pointScaleRule response
          headers:
            location:
              description: Location of the pointScaleRule
              type: string
        '403':
          description: Invalid token


  /pointScaleRules/{pointScaleRuleId}:
    get:
      summary: Returns a single pointScaleRule
      description: |
        Returns a single pointScaleRule
      operationId: findPointScaleRule
      produces:
        - application/json
      parameters:
        - name: pointScaleRuleId
          in: path
          description: ID of pointScaleRule to fetch
          required: true
          type: integer
          format: int64
        - name: token
          in: header
          description: token to be passed as a header
          required: true
          type: string
      responses:
        '200':
          description: pointScaleRule response
          schema:
            $ref: '#/definitions/pointScaleRule'
        '403':
          description: Invalid token
    put:
      summary: Update an existing pointScaleRule
      description: |
        Update an existing pointScaleRule
      operationId: UpdatePointScaleRule
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: pointScaleRule
          in: body
          description: pointScaleRule object to add to the store
          required: true
          schema:
            $ref: '#/definitions/pointScaleRule'
        - name: pointScaleRuleId
          in: path
          description: Id of the pointScaleRule that needs to be updated
          required: true
          type: integer
          format: int64
        - name: token
          in: header
          description: token to be passed as a header
          required: true
          type: string
      responses:
        '200':
          description: pointScaleRule response
        '403':
          description: Invalid token
    delete:
      summary: Delete an existing pointScaleRule
      description: |
        Delete an existing pointScaleRule
      operationId: DeletePointScaleRule
      produces:
        - application/json
      parameters:
        - name: pointScaleRuleId
          in: path
          description: Id of the pointScaleRule that needs to be deleted
          required: true
          type: integer
          format: int64
        - name: token
          in: header
          description: token to be passed as a header
          required: true
          type: string
      responses:
        '204':
          description: pointScaleRule deleted successfully
        '404':
          description: pointScaleRule not found
        '400':
          description: Invalid Id supplied


definitions:
  badge:
    type: object
    required:
      - name
    properties:
      name:
        type: string

  badgeWithLocation:
    type: object
    required:
      - name
      - location
    properties:
      name:
        type: string
      location:
        type: string

  pointScale:
    type: object
    required:
      - name
    properties:
      name:
        type: string

  pointScaleWithLocation:
    type: object
    required:
      - name
      - location
    properties:
      name:
        type: string
      location:
        type: string

  userPointScale:
      type: object
      required:
        - name
        - points
        - location
      properties:
        name:
          type: string
        points:
          type: integer
          format: int64
        location:
          type: string

  user:
    type: object
    required:
      - id
      - username
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string

  userWithNumberOfBadges:
      type: object
      required:
        - username
        - numberOfBadges
      properties:
        username:
          type: string
        numberOfBadges:
          type: integer
          format: int64

  event:
    type: object
    required:
      - type
      - username
    properties:
      username:
        type: string
      type:
        type: string

  badgeRule:
      type: object
      required:
        - type
        - badge
        - pointScale
        - threshold
      properties:
        type:
          type: string
        badge:
          type: integer
          format: int64
        pointScale:
          type: integer
          format: int64
        threshold:
          type: integer
          format: int64

  badgeRuleWithLocation:
      type: object
      required:
        - type
        - badge
        - pointScale
        - threshold
        - location
      properties:
        type:
          type: string
        badge:
          type: integer
          format: int64
        pointScale:
          type: integer
          format: int64
        threshold:
          type: integer
          format: int64
        location:
          type: string

  pointScaleRule:
      type: object
      required:
        - type
        - pointScale
        - increment
      properties:
        type:
          type: string
        pointScale:
          type: integer
          format: int64
        increment:
          type: integer
          format: int64

  pointScaleRuleWithLocation:
      type: object
      required:
        - location
        - type
        - pointScale
        - increment
      properties:
        location:
          type: string
        type:
          type: string
        pointScale:
          type: integer
          format: int64
        increment:
          type: integer
          format: int64

  application:
    type: object
    required:
      - name
      - password
    properties:
      name:
        type: string
      password:
        type: string

  credentials:
      type: object
      required:
        - name
        - password
      properties:
        name:
          type: string
        password:
          type: string

  token:
      type: object
      required:
        - token
      properties:
        token:
          type: string